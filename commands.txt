https://www.youtube.com/watch?v=RGOj5yH7evk
create folder locally
git init
git remote add origin git@github.com:rnalus2022gh/github-actions-rome.git
git remote -v
git push or #git push -u origin master (upstream shortcut)

======================REFERENCES
ACTIONS_STEP_DEBUG
ACTIONS_RUNNER_DEBUG
Try Locally: nektos/act
github/super-linter

MS Learn
https://docs.microsoft.com/en-us/learn/paths/automate-workflow-github-actions/
https://docs.github.com/en/get-started/quickstart/github-flow
https://docs.github.com/en/get-started/using-git
https://docs.github.com/en/get-started/quickstart
https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues
https://github.com/notifications
https://help.github.com/github/collaborating-with-issues-and-pull-requests/about-branches
https://help.github.com/desktop/contributing-to-projects/committing-and-reviewing-changes-to-your-project
https://help.github.com/github/collaborating-with-issues-and-pull-requests/about-pull-requests
https://docs.github.com/en/free-pro-team@latest/github/managing-your-work-on-github/about-labels


Managing workflow runs - Enabling-debug-logging
https://docs.github.com/en/actions/managing-workflow-runs#enabling-debug-logging
Checkout Usage
https://github.com/actions/checkout#usage
Crontab Guru
https://crontab.guru/
https://crontab.guru/examples.html
==

# copy sh github repo address
git remote add origin git@github.com:rnalus2022gh/github-actions-rome.git
git remote -v
    origin  git@github.com:rnalus2022gh/github-actions-test.git (fetch)
    origin  git@github.com:rnalus2022gh/github-actions-test.git (push)

git remote rm origin
rm -rf .git/

git status
ssh-keygen -t rsa -b 4096 -C "rcnalus@outlook.com" (same email as github email)
cd C:/users/rome/.ssh/
cat C:/users/rome/.ssh/id_rsa
cd - (shortcut to previous folder)

git add .
git commit -m " 1st"
git push --set-upstream origin main/master

git push -o merge_request.create origin master
https://dev.to/farnabaz/gitlab-create-merge-requests-from-cli-c36
    
Enabling debug logging
https://docs.github.com/en/enterprise-server@3.1/actions/monitoring-and-troubleshooting-workflows/enabling-debug-logging

Merging via command line
Merging via command line
If you do not want to use the merge button or an automatic merge cannot be performed, 
you can perform a manual merge on the command line. 
However, the following steps are not applicable if the base branch is protected.

Step 1: From your project repository, bring in the changes and test.

git fetch origin
git checkout -b dev origin/dev
git merge master (gets files from the master branch)
Step 2: Merge the changes and update on GitHub.

git checkout master
git merge --no-ff dev (gets file from the dev branch) or git merge dev
git push origin master

git diff dev 
git pull origin master ( to get update from master to your branch)

# Create a new Branch
git checkout -b dev ( create and checkout a new branch)
    Switched to a new branch 'dev'
git add -A
git commit -m "Comments"
# git commit -am "quick" (shortcut)
git push
    fatal: The current branch dev has no upstream branch.
    To push the current branch and set the remote as upstream, use
git push --set-upstream origin dev

## dev had recent pushes less than a minute ago

#Delete a branch
https://www.cloudbees.com/blog/git-delete-branch-how-to-for-both-local-and-remote

git branch -d dev
git push origin --delete dev
    To github.com:rnalus2022gh/github-actions-rome.git
    - [deleted]         dev

git reset ( unstage changes)
git reset HEAD~1 (one commit further to unstage/uncommitted)
git log
git reset c8538c5f4b143f5a3f5a8a6d81802985d8d10d68 (unstage after this commit)
git reset --hard c8538c5f4b143f5a3f5a8a6d81802985d8d10d68 (completely remove files)

FORKING
